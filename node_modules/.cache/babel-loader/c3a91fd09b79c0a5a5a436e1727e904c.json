{"ast":null,"code":"var bind = require('../internals/function-bind-context');\n\nvar call = require('../internals/function-call');\n\nvar aConstructor = require('../internals/a-constructor');\n\nvar toObject = require('../internals/to-object');\n\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\n\nvar getIterator = require('../internals/get-iterator');\n\nvar getIteratorMethod = require('../internals/get-iterator-method');\n\nvar isArrayIteratorMethod = require('../internals/is-array-iterator-method');\n\nvar isBigIntArray = require('../internals/is-big-int-array');\n\nvar aTypedArrayConstructor = require('../internals/array-buffer-view-core').aTypedArrayConstructor;\n\nvar toBigInt = require('../internals/to-big-int');\n\nmodule.exports = function from(source\n/* , mapfn, thisArg */\n) {\n  var C = aConstructor(this);\n  var O = toObject(source);\n  var argumentsLength = arguments.length;\n  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;\n  var mapping = mapfn !== undefined;\n  var iteratorMethod = getIteratorMethod(O);\n  var i, length, result, thisIsBigIntArray, value, step, iterator, next;\n\n  if (iteratorMethod && !isArrayIteratorMethod(iteratorMethod)) {\n    iterator = getIterator(O, iteratorMethod);\n    next = iterator.next;\n    O = [];\n\n    while (!(step = call(next, iterator)).done) {\n      O.push(step.value);\n    }\n  }\n\n  if (mapping && argumentsLength > 2) {\n    mapfn = bind(mapfn, arguments[2]);\n  }\n\n  length = lengthOfArrayLike(O);\n  result = new (aTypedArrayConstructor(C))(length);\n  thisIsBigIntArray = isBigIntArray(result);\n\n  for (i = 0; length > i; i++) {\n    value = mapping ? mapfn(O[i], i) : O[i]; // FF30- typed arrays doesn't properly convert objects to typed array values\n\n    result[i] = thisIsBigIntArray ? toBigInt(value) : +value;\n  }\n\n  return result;\n};","map":{"version":3,"names":["bind","require","call","aConstructor","toObject","lengthOfArrayLike","getIterator","getIteratorMethod","isArrayIteratorMethod","isBigIntArray","aTypedArrayConstructor","toBigInt","module","exports","from","source","C","O","argumentsLength","arguments","length","mapfn","undefined","mapping","iteratorMethod","i","result","thisIsBigIntArray","value","step","iterator","next","done","push"],"sources":["C:/Users/RALPC-011/Desktop/scratch_admin/node_modules/core-js/internals/typed-array-from.js"],"sourcesContent":["var bind = require('../internals/function-bind-context');\nvar call = require('../internals/function-call');\nvar aConstructor = require('../internals/a-constructor');\nvar toObject = require('../internals/to-object');\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\nvar getIterator = require('../internals/get-iterator');\nvar getIteratorMethod = require('../internals/get-iterator-method');\nvar isArrayIteratorMethod = require('../internals/is-array-iterator-method');\nvar isBigIntArray = require('../internals/is-big-int-array');\nvar aTypedArrayConstructor = require('../internals/array-buffer-view-core').aTypedArrayConstructor;\nvar toBigInt = require('../internals/to-big-int');\n\nmodule.exports = function from(source /* , mapfn, thisArg */) {\n  var C = aConstructor(this);\n  var O = toObject(source);\n  var argumentsLength = arguments.length;\n  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;\n  var mapping = mapfn !== undefined;\n  var iteratorMethod = getIteratorMethod(O);\n  var i, length, result, thisIsBigIntArray, value, step, iterator, next;\n  if (iteratorMethod && !isArrayIteratorMethod(iteratorMethod)) {\n    iterator = getIterator(O, iteratorMethod);\n    next = iterator.next;\n    O = [];\n    while (!(step = call(next, iterator)).done) {\n      O.push(step.value);\n    }\n  }\n  if (mapping && argumentsLength > 2) {\n    mapfn = bind(mapfn, arguments[2]);\n  }\n  length = lengthOfArrayLike(O);\n  result = new (aTypedArrayConstructor(C))(length);\n  thisIsBigIntArray = isBigIntArray(result);\n  for (i = 0; length > i; i++) {\n    value = mapping ? mapfn(O[i], i) : O[i];\n    // FF30- typed arrays doesn't properly convert objects to typed array values\n    result[i] = thisIsBigIntArray ? toBigInt(value) : +value;\n  }\n  return result;\n};\n"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,oCAAD,CAAlB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,4BAAD,CAAlB;;AACA,IAAIE,YAAY,GAAGF,OAAO,CAAC,4BAAD,CAA1B;;AACA,IAAIG,QAAQ,GAAGH,OAAO,CAAC,wBAAD,CAAtB;;AACA,IAAII,iBAAiB,GAAGJ,OAAO,CAAC,mCAAD,CAA/B;;AACA,IAAIK,WAAW,GAAGL,OAAO,CAAC,2BAAD,CAAzB;;AACA,IAAIM,iBAAiB,GAAGN,OAAO,CAAC,kCAAD,CAA/B;;AACA,IAAIO,qBAAqB,GAAGP,OAAO,CAAC,uCAAD,CAAnC;;AACA,IAAIQ,aAAa,GAAGR,OAAO,CAAC,+BAAD,CAA3B;;AACA,IAAIS,sBAAsB,GAAGT,OAAO,CAAC,qCAAD,CAAP,CAA+CS,sBAA5E;;AACA,IAAIC,QAAQ,GAAGV,OAAO,CAAC,yBAAD,CAAtB;;AAEAW,MAAM,CAACC,OAAP,GAAiB,SAASC,IAAT,CAAcC;AAAO;AAArB,EAA6C;EAC5D,IAAIC,CAAC,GAAGb,YAAY,CAAC,IAAD,CAApB;EACA,IAAIc,CAAC,GAAGb,QAAQ,CAACW,MAAD,CAAhB;EACA,IAAIG,eAAe,GAAGC,SAAS,CAACC,MAAhC;EACA,IAAIC,KAAK,GAAGH,eAAe,GAAG,CAAlB,GAAsBC,SAAS,CAAC,CAAD,CAA/B,GAAqCG,SAAjD;EACA,IAAIC,OAAO,GAAGF,KAAK,KAAKC,SAAxB;EACA,IAAIE,cAAc,GAAGjB,iBAAiB,CAACU,CAAD,CAAtC;EACA,IAAIQ,CAAJ,EAAOL,MAAP,EAAeM,MAAf,EAAuBC,iBAAvB,EAA0CC,KAA1C,EAAiDC,IAAjD,EAAuDC,QAAvD,EAAiEC,IAAjE;;EACA,IAAIP,cAAc,IAAI,CAAChB,qBAAqB,CAACgB,cAAD,CAA5C,EAA8D;IAC5DM,QAAQ,GAAGxB,WAAW,CAACW,CAAD,EAAIO,cAAJ,CAAtB;IACAO,IAAI,GAAGD,QAAQ,CAACC,IAAhB;IACAd,CAAC,GAAG,EAAJ;;IACA,OAAO,CAAC,CAACY,IAAI,GAAG3B,IAAI,CAAC6B,IAAD,EAAOD,QAAP,CAAZ,EAA8BE,IAAtC,EAA4C;MAC1Cf,CAAC,CAACgB,IAAF,CAAOJ,IAAI,CAACD,KAAZ;IACD;EACF;;EACD,IAAIL,OAAO,IAAIL,eAAe,GAAG,CAAjC,EAAoC;IAClCG,KAAK,GAAGrB,IAAI,CAACqB,KAAD,EAAQF,SAAS,CAAC,CAAD,CAAjB,CAAZ;EACD;;EACDC,MAAM,GAAGf,iBAAiB,CAACY,CAAD,CAA1B;EACAS,MAAM,GAAG,KAAKhB,sBAAsB,CAACM,CAAD,CAA3B,EAAgCI,MAAhC,CAAT;EACAO,iBAAiB,GAAGlB,aAAa,CAACiB,MAAD,CAAjC;;EACA,KAAKD,CAAC,GAAG,CAAT,EAAYL,MAAM,GAAGK,CAArB,EAAwBA,CAAC,EAAzB,EAA6B;IAC3BG,KAAK,GAAGL,OAAO,GAAGF,KAAK,CAACJ,CAAC,CAACQ,CAAD,CAAF,EAAOA,CAAP,CAAR,GAAoBR,CAAC,CAACQ,CAAD,CAApC,CAD2B,CAE3B;;IACAC,MAAM,CAACD,CAAD,CAAN,GAAYE,iBAAiB,GAAGhB,QAAQ,CAACiB,KAAD,CAAX,GAAqB,CAACA,KAAnD;EACD;;EACD,OAAOF,MAAP;AACD,CA5BD"},"metadata":{},"sourceType":"script"}